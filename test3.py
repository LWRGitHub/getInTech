"class Solution(object):\n    def threeSum(self, nums):\n        \n        res = []\n        nums.sort()\n        for i in range(len(nums)):\n            # nums is **sorted** & all numbers > 0 can NOT sum to 0\n            if nums[i] > 0: break\n            # avoid duplicates\n            if i == 0 or nums[i - 1] != nums[i]: \n                self.sum0(nums, i, res)\n        return res\n        \n    def sum0(slef, nums, i, res):\n        # 2 pointers\n        sm = i + 1\n        lg = len(nums)-1\n\n        while sm < lg:\n            # sum 3 numbers; goal is `total = 0`\n            total = nums[i] + nums[sm] + nums[lg]\n            \n            if total < 0:\n                ''' \n                    IF ⬇️\n                    nums = [ -3, -3, 0, 1, 2, 4 ]\n                                  i sm    lg     \n                    nums[i] = -3\n                    nums[sm] = 0\n                    nums[lg] = 2\n                    # then `total` is ⬇️\n                    total = -1\n\n                    # ℹ️ then we must increase the sm index by one `sm+=1`\n                        # Indexes before `sm` are smaller, & our total is smaller. \n                        # We need a larger total. \n                        # Increasing `sm` by 1 ensures all numbers are `>=` to.\n                        # Because we sorted the List e.g >>> `nums.sort()`\n\n                    # `sm+=1` we have ⬇️\n                    nums = [ -3, -3, 0, 1, 2, 4 ]\n                                  i    sm lg  \n                    nums[i] = -3\n                    nums[sm] = 1\n                    nums[lg] = 2\n                    # & `total` is ⬇️\n                    total = 0\n                '''\n                sm+=1\n            elif total > 0:\n                ''' \n                    if ⬇️\n                    nums = [ -4, -1, -1, 0, 1, 2 ]\n                                  i     sm    lg  \n                    nums[i] = -1\n                    nums[sm] = 0\n                    nums[lg] = 2\n                    # & `total` is ⬇️\n                    total = 1\n\n                    # then we must decrease the lg index by 1 `lg-=1`\n                    # & then we have ⬇️\n                    nums = [ -4, -1, -1, 0, 1, 2 ]\n                                  i     sm lg \n                    nums[i] = -1\n                    nums[sm] = 0\n                    nums[lg] = 1\n                    # & `total` is ⬇️\n                    total = 0\n                '''\n                lg-=1\n            else:\n                # `total = 0` so add it to `res`\n                res.append([nums[i], nums[sm], nums[lg]])\n                # change numbers... \n                sm+=1\n                lg-=1\n                # avoiding duplicates\n                while sm < lg and nums[sm] == nums[sm - 1]: sm+=1"